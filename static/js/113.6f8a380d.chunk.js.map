{"version":3,"file":"static/js/113.6f8a380d.chunk.js","mappings":"wMAAe,SAASA,EAA0BC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,+BACvC,C,0CCDA,EAA+B,kC,6BC6B/B,EA3BsCC,EAAAA,MAAW,YAAuC,IAApCC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,KAClEC,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,OAWf,OACE,iBAAKC,QALc,SAACC,GACpB,IAAMH,EAAQI,UAAY,GAC1BP,GAAW,kBAAKE,GAAN,IAAYC,MAAAA,IACvB,EAEC,WACE,0BAAOA,KACP,0BAAOC,KACP,mBAAQC,QAbS,SAACC,GACpBA,EAAEE,kBACFP,EAAWC,EACZ,EAUG,2BAGL,I,UCdKO,EAAwBV,EAAAA,MAAW,WACvC,IAKA,EAIIW,EAAAA,EAAAA,mBATkB,CACpBC,MAAO,EACPC,IAAK,KAOwC,CAC7CC,gBAAiB,OAJXC,EADR,EACEC,KACOC,EAFT,EAEEC,MACWC,EAHb,EAGEC,UAKF,EACET,EAAAA,EAAAA,wBADF,eAAOU,EAAP,YAA4BC,EAA5B,EAAqBJ,MAAmCK,EAAxD,EAA6CH,UAE7C,EAAyBT,EAAAA,EAAAA,wBAAzB,eAAOV,EAAP,aACA,MAAyBU,EAAAA,EAAAA,wBAAzB,eAAOa,EAAP,aAEA,IAAMC,EAAgB,yCAAG,gGACjBrB,EAAQI,SADS,SAEjBa,EAAW,CAAEjB,MAAAA,EAAOC,OAAQD,IAFX,2CAAH,qDAKhBsB,EAAmB,SAACvB,GACxBF,EAAWE,EACZ,EAEKwB,EAAmB,SAACxB,GACxBqB,EAAWrB,EACZ,EAED,OACE,iBAAKyB,UAAWC,IAAGC,GAAnB,WACE,mBAAQxB,QAASmB,EAAjB,uBACA,gCACGN,IAAqB,SAAC,KAAD,IACrBI,IAAuB,SAAC,KAAD,QAE1B,gCACGN,GAAiB,WAAYA,GAAgB,wBAAKA,EAAcc,SAAe,KAC/ET,GAAmB,WAAYA,GAAkB,wBAAKA,EAAgBS,SAAe,QAR1F,OAUGhB,QAVH,IAUGA,OAVH,EAUGA,EAAOiB,KAAI,SAAC7B,GACX,OACE,SAAC,EAAD,CACED,WAAYyB,EACZ1B,WAAYyB,EAEZvB,KAAMA,GADDA,EAAK8B,GAIf,MAGN,IAED,G","sources":["../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","webpack://react-app-template_v2/./src/widgets/PostsWidget/styles/PostsWidget.module.scss?fcab","widgets/PostsWidget/modules/PostItem/index.tsx","widgets/PostsWidget/index.tsx"],"sourcesContent":["export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","// extracted by mini-css-extract-plugin\nexport default {\"posts_widget\":\"PostsWidget_posts_widget__CAho6\"};","import React from \"react\";\r\nimport { Post } from \"../../../../models/interfaces/Post.interface\";\r\n\r\nconst PostItem: React.FC<PropsType> = React.memo(({ updatePost, removePost, post }) => {\r\n  const { title, author } = post;\r\n\r\n  const handleRemove = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    removePost(post);\r\n  };\r\n\r\n  const handleUpdate = (e: React.MouseEvent) => {\r\n    const title = prompt() || \"\";\r\n    updatePost({ ...post, title });\r\n  };\r\n  return (\r\n    <div onClick={handleUpdate}>\r\n      <span>{title}</span>\r\n      <span>{author}</span>\r\n      <button onClick={handleRemove}>Delete Post</button>\r\n    </div>\r\n  );\r\n});\r\n\r\ninterface PropsType {\r\n  post: Post;\r\n  updatePost: (post: Post) => void;\r\n  removePost: (post: Post) => void;\r\n}\r\n\r\nexport default PostItem;\r\n","import React from \"react\";\r\nimport cn from \"classnames\";\r\nimport styles from \"./styles/PostsWidget.module.scss\";\r\nimport { postsAPI } from \"./../../services/PostServices\";\r\nimport { PostItem } from \"./modules\";\r\nimport { Preloader } from \"../../components/common\";\r\nimport { Post } from \"../../models/interfaces/Post.interface\";\r\n\r\nconst PostsWidget: React.FC = React.memo(() => {\r\n  const postQueryArgs = {\r\n    start: 1,\r\n    end: 100,\r\n  };\r\n\r\n  const {\r\n    data: posts,\r\n    error: getPostsError,\r\n    isLoading: getPostsIsLoading,\r\n  } = postsAPI.useFetchPostsQuery(postQueryArgs, {\r\n    pollingInterval: 3600000,\r\n  });\r\n\r\n  const [createPost, { error: createPostError, isLoading: createPostIsLoading }] =\r\n    postsAPI.useCreatePostMutation();\r\n  const [updatePost, {}] = postsAPI.useUpdatePostMutation();\r\n  const [deletePost, {}] = postsAPI.useDeletePostMutation();\r\n\r\n  const handleCreatePost = async () => {\r\n    const title = prompt();\r\n    await createPost({ title, author: title } as Post);\r\n  };\r\n\r\n  const handleUpdatePost = (post: Post) => {\r\n    updatePost(post);\r\n  };\r\n\r\n  const handleRemovePost = (post: Post) => {\r\n    deletePost(post);\r\n  };\r\n\r\n  return (\r\n    <div className={cn(styles.posts_widget)}>\r\n      <button onClick={handleCreatePost}>Add Post</button>\r\n      <>\r\n        {getPostsIsLoading && <Preloader />}\r\n        {createPostIsLoading && <Preloader />}\r\n      </>\r\n      <>\r\n        {getPostsError && \"status\" in getPostsError ? <h1>{getPostsError.status}</h1> : null}\r\n        {createPostError && \"status\" in createPostError ? <h1>{createPostError.status}</h1> : null}\r\n      </>\r\n      {posts?.map((post) => {\r\n        return (\r\n          <PostItem\r\n            removePost={handleRemovePost}\r\n            updatePost={handleUpdatePost}\r\n            key={post.id}\r\n            post={post}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default PostsWidget;\r\n"],"names":["_objectDestructuringEmpty","obj","TypeError","React","updatePost","removePost","post","title","author","onClick","e","prompt","stopPropagation","PostsWidget","postsAPI","start","end","pollingInterval","posts","data","getPostsError","error","getPostsIsLoading","isLoading","createPost","createPostError","createPostIsLoading","deletePost","handleCreatePost","handleUpdatePost","handleRemovePost","className","cn","styles","status","map","id"],"sourceRoot":""}